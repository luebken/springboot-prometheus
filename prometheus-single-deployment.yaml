apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: greeting
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  strategy: {}
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - image: prom/prometheus
        ports:
        - containerPort: 9090
        name: greeting
        resources: {}
        imagePullPolicy: Always
        volumeMounts:
          - name: config
            mountPath: "/etc/prometheus/"
            readOnly: true
      volumes:
        - name: config
          configMap: 
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: greeting
spec:
  ports:
  - name: 9090-9090
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: prometheus
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: greeting
data:
  prometheus.yml: |
    # my global config
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          # - alertmanager:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'

        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

        static_configs:
        - targets: ['localhost:9090']
      - job_name: 'my endpoints'
        metrics_path: '/actuator/prometheus'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - greeting
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: greeting
  name: prometheus-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["endpoints", "services", "pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: prometheus-reader-binding
  namespace: greeting
subjects:
# You can specify more than one "subject"
- kind: ServiceAccount
  name: default
  namespace: greeting
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: prometheus-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
